name: zuzu nestjs unit test

on:
    pull_request:
        branches: [develop, main]

jobs:
    test:
        runs-on: ubuntu-20.04
        timeout-minutes: 10

        # runs all of the steps inside the specified container rather than on the VM host.
        # Because of this the network configuration changes from host based network to a container network.
        container:
            image: node:16.5-alpine

        services:
            postgresql:
                image: postgres:13.7
                ports:
                    - 5432:5432
                env:
                    POSTGRES_HOST: ${{secrets.POSTGRES_HOST}}
                    POSTGRES_USER: ${{secrets.POSTGRES_USER}}
                    POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
                    POSTGRES_DB: ${{secrets.POSTGRES_DB}}
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5 --name postgres-test

        steps:
            - uses: actions/checkout@v3
            - uses: pnpm/action-setup@v2
              with:
                  version: 7.3.0
            - name: Use Node ${{ matrix.node-version }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: 'pnpm'
            - name: Create env.test file
              run: |
                  touch .env.test
                  echo NODE_ENV=${{ secrets.NODE_ENV }} >> .env.test
                  echo PORT=${{secrets.PORT}} >> .env.test
                  echo DATABASE_USER=${{secrets.DATABASE_USER}} >> .env.test
                  echo DATABASE_PASSWORD=${{secrets.DATABASE_PASSWORD}} >> .env.test
                  echo DATABASE_HOST=${{secrets.DATABASE_HOST}} >> .env.test
                  echo DATABASE_PORT=${{secrets.DATABASE_PORT}} >> .env.test
                  echo DATABASE_DB=${{secrets.DATABASE_DB}} >> .env.test
                  echo POSTGRES_HOST=${{secrets.POSTGRES_HOST}} >> .env.test
                  echo POSTGRES_PORT=${{secrets.POSTGRES_PORT}} >> .env.test
                  echo POSTGRES_USER=${{secrets.POSTGRES_USER}} >> .env.test
                  echo POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} >> .env.test
                  echo POSTGRES_DB=${{secrets.POSTGRES_DB}} >> .env.test
                  echo KAKAO_CLIENT_ID=${{secrets.KAKAO_CLIENT_ID}} >> .env.test
                  echo KAKAO_REDIRECT_URL=${{secrets.KAKAO_REDIRECT_URL}} >> .env.test
                  echo JWT_ACCESS_TOKEN_SECRET: ${{secrets.JWT_ACCESS_TOKEN_SECRET}} >> .env.test
                  echo JWT_ACCESS_TOKEN_EXPIRATION_TIME: ${{secrets.JWT_ACCESS_TOKEN_EXPIRATION_TIME}} >> .env.test
                  echo JWT_REFRESH_TOKEN_SECRET: ${{secrets.JWT_REFRESH_TOKEN_SECRET}} >> .env.test
                  echo JWT_REFRESH_TOKEN_EXPIRATION_TIME: ${{secrets.JWT_REFRESH_TOKEN_EXPIRATION_TIME}} >> .env.test
            - name: Install packages
              run: pnpm install --frozen-lockfile
            - name: Run unit test
              run: pnpm run test:e2e
